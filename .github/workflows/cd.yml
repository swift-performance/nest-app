name: Build and deploy Docker app to Azure

on: push

# CONFIGURATION
# For help, go to https://github.com/Azure/Actions
#
# Set up the following secrets in your repository:
#   AZURE_CREDENTIALS, REGISTRY_USERNAME, REGISTRY_PASSWORD, REGISTRY_URL
# 2. Change these variables for your configuration:
env:
  AZURE_WEBAPP_NAME: ${{ secrets.APP_NAME_BETA }} # set this to your application's name
  CONTAINER_REGISTRY: ${{ secrets.REGISTRY_URL }} # set secret with Container Registry URL, example : xyz.azurecr.io
  RESOURCE_GROUP: ${{ secrets.AZURE_RG }}
  IMAGE_NAME: ${{ github.repository }}
  # APP_ENVIRONMENT: ${{ secrets.ENVIRONEMENT }}
# AZURE_RESOURCE_GROUP: ActionsDemo   # set this to your Azure Resource group's name - Needed only if you are provisioning the app in the workflow
# AZURE_APP_PLAN: ActionPlan  # set this to your App service plan's name - Needed only if you are provisioning the app in the workflow

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        services:
          [{ "imageName": "node-service", "directory": "./node-service" }]
    permissions:
      contents: read
      packages: write
    outputs:
      containerImage-node: ${{ steps.image-tag.outputs.image-node-service }}
    # environment: ${{ env.APP_ENVIRONMENT}}
    steps:
      - run: |
          echo get git env.APP_ENVIRONMENT
        env:
          environment: ${{ secrets.APP_ENV }}
      - name: Some check on branch name
        id: branch_check
        run: |
          if [[ ${{ secrets.APP_ENV }} == 'dev' ]]; then
            echo "::set-output name=env_name::master"
          elif  [[ ${{ secrets.APP_ENV }} == 'prod' ]]; then
            echo "::set-output name=env_name::production"
          else
          echo "::set-output name=env_name::feat"
          fi
      - name: Use variable setup in previous step
        run: echo "I'm using variable ${{ steps.branch_check.outputs.env_name }}"

      - uses: actions/checkout@master
      - name: Azure authentication
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      #     - name: Azure CLI script to provision a new Web App for Container
      #       uses: azure/CLI@v0-beta
      #       with:
      #         azcliversion: latest
      #         inlineScript: |
      #           az webapp create --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --plan ${{ env.AZURE_APP_PLAN }} --name ${{ env.AZURE_WEBAPP_NAME }}  -i nginx
      - name: ACR authentication
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - name: Docker Build & Push to ACR
        run: |
          docker build . -t ${{ env.CONTAINER_REGISTRY }}/${{ github.repository }}:${{ github.sha }}
          docker push ${{ env.CONTAINER_REGISTRY }}/${{ github.repository }}:${{ github.sha }}

      # Uncomment the below action snippet if the Web app credentials are not updated as web app settings
      - name: Set Web App ACR authentication
        uses: Azure/appservice-settings@v1
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          app-settings-json: |
            [
                {
                    "name": "DOCKER_REGISTRY_SERVER_PASSWORD",
                    "value": "${{ secrets.REGISTRY_PASSWORD }}",
                    "slotSetting": true
                },
                {
                    "name": "DOCKER_REGISTRY_SERVER_URL",
                    "value": "https://${{ env.CONTAINER_REGISTRY }}",
                    "slotSetting": true
                },
                {
                    "name": "DOCKER_REGISTRY_SERVER_USERNAME",
                    "value": "${{ secrets.REGISTRY_USERNAME  }}",
                    "slotSetting": true
               }
            ]
      - name: Output image tag
        id: image-tag
        run: echo "::set-output name=image-${{ matrix.services.imageName }}::${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.services.imageName }}:sha-$(git rev-parse --short HEAD)" | tr '[:upper:]' '[:lower:]'

      - name: "Deploy to Azure Web App for Container"
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          images: ${{ env.CONTAINER_REGISTRY }}/${{ github.repository }}:${{ github.sha }}
  #         startup-command: 'npm start'    # Include start up command to start the app container
  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy bicep
        uses: azure/CLI@v1
        if: github.event_name != 'pull_request'
        with:
          inlineScript: |
            tags='{"owner":"swift-sandeep", "email":"sandeep@swiftperformannce.com"}'
            az deployment group create \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --template-file ./main.bicep \
              --parameters \
                  nodeImage='${{ needs.build.outputs.containerImage-node }}' \
                  nodePort=3000 \
                  nodeIsExternalIngress=true \
                  containerRegistry=${{ env.CONTAINER_REGISTRY }} \
                  containerRegistryUsername=${{ secrets.REGISTRY_USERNAME }} \
                  containerRegistryPassword=${{ secrets.REGISTRY_PASSWORD }} \
                  tags="$tags" \
                  APPSETTINGS_DOMAIN=${{ secrets.APPSETTINGS_DOMAIN }} \
                  APPSETTINGS_FROM_EMAIL=${{ secrets.APPSETTINGS_FROM_EMAIL }} \
                  APPSETTINGS_RECIPIENT_EMAIL=${{ secrets.APPSETTINGS_RECIPIENT_EMAIL }}

      - name: What-if bicep
        uses: azure/CLI@v1
        if: github.event_name == 'pull_request'
        with:
          inlineScript: |
            tags='{"owner":"swift-sandeep", "email":"sandeep@swiftperformannce.com"}'
            az deployment group what-if \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --template-file ./main.bicep \
              --parameters \
                  nodeImage='${{ needs.build.outputs.containerImage-node }}' \
                  nodePort=3000 \
                  nodeIsExternalIngress=true \
                  containerRegistry=${{ env.CONTAINER_REGISTRY }} \
                  containerRegistryUsername=${{ secrets.REGISTRY_USERNAME }} \
                  containerRegistryPassword=${{ secrets.REGISTRY_PASSWORD }} \
                  tags="$tags" \ 
                  APPSETTINGS_DOMAIN=${{ secrets.APPSETTINGS_DOMAIN }} \
                  APPSETTINGS_FROM_EMAIL=${{ secrets.APPSETTINGS_FROM_EMAIL }} \
                  APPSETTINGS_RECIPIENT_EMAIL=${{ secrets.APPSETTINGS_RECIPIENT_EMAIL }}

# For more samples to get started with GitHub Action workflows to deploy to Azure, refer to https://github.com/Azure/actions-workflow-samples
