name: Build and deploy Docker app to Azure

on:
  push:
    branches:
      - master
  ## push:
  ### - prod-v2*

  workflow_call:
    inputs:
      environmentType:
        description: "environment for project"
        default: development
        required: true
        type: string

# CONFIGURATION
# For help, go to https://github.com/Azure/Actions
#
# Set up the following secrets in your repository:
#   AZURE_CREDENTIALS, REGISTRY_USERNAME, REGISTRY_PASSWORD, REGISTRY_URL
# 2. Change these variables for your configuration:
env:
  AZURE_WEBAPP_NAME: ${{ secrets.AZURE_WEBAPP_NAME }} # set this to your application's name
  CONTAINER_REGISTRY: ${{ secrets.REGISTRY_URL }} # set secret with Container Registry URL, example : xyz.azurecr.io
# AZURE_RESOURCE_GROUP: ActionsDemo   # set this to your Azure Resource group's name - Needed only if you are provisioning the app in the workflow
# AZURE_APP_PLAN: ActionPlan  # set this to your App service plan's name - Needed only if you are provisioning the app in the workflow

jobs:
  build-and-deploy-to-dev:
    runs-on: ubuntu-latest
    environment: ${{ needs.build.outputs.env_name }}
    steps:
      - uses: actions/checkout@master
      - name: Azure authentication
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      #     - name: Azure CLI script to provision a new Web App for Container
      #       uses: azure/CLI@v0-beta
      #       with:
      #         azcliversion: latest
      #         inlineScript: |
      #           az webapp create --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --plan ${{ env.AZURE_APP_PLAN }} --name ${{ env.AZURE_WEBAPP_NAME }}  -i nginx
      - name: Some check on branch
        id: branch_check
        run: |
          raw=$(git branch -r --contains ${{ github.ref }})
          branch=${raw##*/}
          echo "::set-output name=branch::$branch"
          echo "Branch is $branch."
          echo "Running on branch ${{ github.ref }} ${{ github.event.base_ref }}"
          if [ "${{ github.ref }}"= "refs/tags/beta-v1*" ]; then
            echo "::set-output name=env_name::development"
          elif [ "${{ github.event.base_ref}}" = "refs/tags/beta-v1*" ]; then
            echo "::set-output name=env_name::production"
          else
            echo "::set-output name=env_name::feat"
          fi

      - name: Use variable setup in previous step
        run: echo "I'm using variable ${{ steps.branch_check.outputs.env_name }}"

      - name: ACR authentication
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - name: Docker Build & Push to ACR
        run: |
          docker build . -t ${{ env.CONTAINER_REGISTRY }}/nodejsapp:${{ github.sha }}
          docker push ${{ env.CONTAINER_REGISTRY }}/nodejsapp:${{ github.sha }}

      # Uncomment the below action snippet if the Web app credentials are not updated as web app settings
      - name: Set Web App ACR authentication
        uses: Azure/appservice-settings@v1
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          app-settings-json: |
            [
                {
                    "name": "DOCKER_REGISTRY_SERVER_PASSWORD",
                    "value": "${{ secrets.REGISTRY_PASSWORD }}",
                    "slotSetting": false
                },
                {
                   "name": "DOCKER_REGISTRY_SERVER_URL",
                    "value": "https://${{ env.CONTAINER_REGISTRY }}",
                    "slotSetting": false
                },
                {
                    "name": "DOCKER_REGISTRY_SERVER_USERNAME",
                    "value": "${{ secrets.REGISTRY_USERNAME  }}",
                    "slotSetting": false
                }
            ]

      - name: "Deploy to Azure Web App for Container"
        # run: echo The default environement  is ${{ inputs.environmentType }} branch ${GITHUB_REF##*/}
        uses: azure/webapps-deploy@v2
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
          resourceGroupName: ${{ secrets.AZURE_RG }}
          template: ./main.bicep
          parameters:
            " storageSKU=Standard_LRS env=steps.branch_check.outputs.env_name AZURE_RESOURCE_GROUP= ${{ secrets.AZURE_RG}}
            "
          failOnStdErr: false
          images: ${{ env.CONTAINER_REGISTRY }}/nodejsapp:${{ github.sha }}

      # For more samples to get started with GitHub Action workflows to deploy to Azure, refer to https://github.com/Azure/actions-workflow-samples

    outputs:
      env_name: ${{ steps.branch_check.outputs.env_name }}
